#!/usr/bin/env ruby

require 'aws-sdk-ec2' # v3
require 'yaml'
require 'slop'

AMI_DEV_PREFIX = "runs-on-dev"
AMI_PROD_PREFIX = "runs-on-v2.2"
SOURCE_REGION = "eu-west-2"
REGIONS = YAML.load_file(File.expand_path("../config.yml", __dir__)).fetch("regions")

options = {}

usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} [--force] ami_id_or_name"
  opts.bool '-f', '--force', 'Do not ask for confirmation'
  opts.bool '-h', '--help', 'Show help'
end

begin
  options = usage.parse(ARGV)
  if options.arguments.empty?
    raise Slop::Error.new("AMI ID or name is required")
  end
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

ami_id_or_name = options.arguments.first
force = options.force?

def copy_ami_to_regions(ami_id_or_name, regions, force = false)
  ec2 = Aws::EC2::Client.new(region: SOURCE_REGION)
  ami_description = ec2.describe_images({
    filters: [
      ami_id_or_name.start_with?("ami-") ? { name: "image-id", values: [ami_id_or_name] } : { name: "name", values: [ami_id_or_name] },
      { name: "state", values: ["available"] }
    ]
  }).images.first

  if ami_description.nil?
    fail "no AMI found"
  end

  ami_id = ami_description.image_id
  name = ami_description.name.sub(AMI_DEV_PREFIX, AMI_PROD_PREFIX)
  puts "Going to copy AMI #{ami_id} (#{ami_description.name}) to #{regions.join(', ')} with name: #{name}"

  if name.start_with?("runs-on-v")
    puts "Warning: you are copying the AMI as an official image (#{name})."
    reply = if force
      'y'
    else
      print "Make sure you know what you are doing (y/n) "
      gets.chomp
    end

    if reply.downcase != 'y'
      puts "Exiting"
      exit 1
    end
  end

  sleep 5

  results = regions.map do |region|
    puts "Copying AMI #{ami_id} to #{region}..."
    ec2 = Aws::EC2::Client.new(region: region)
    response = ec2.copy_image({
      source_region: SOURCE_REGION,
      source_image_id: ami_id,
      copy_image_tags: true,
      name: name,
      description: "RunsOn copy of #{ami_id} to #{region}",
    })

    res = {client: ec2, region: region, image_id: response.image_id}

    # to avoid throttling
    sleep 2
    res
  end

  results.each do |res|
    ec2, image_id, region = res.values_at(:client, :image_id, :region)
    puts "Waiting for AMI #{image_id} to be available in #{region}..."
    ec2.wait_until(:image_available, image_ids: [image_id])
    puts "AMI #{image_id} is now available in region #{region}"

    ec2.modify_image_attribute({
      image_id: image_id,
      launch_permission: {
        add: [{ group: 'all' }]
      }
    })
    puts "Launch permissions for AMI #{image_id} updated to public"
    # to avoid throttling
    sleep 2
  end
end

copy_ami_to_regions(ami_id_or_name, REGIONS, force)